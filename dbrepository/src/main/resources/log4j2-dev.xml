<?xml version="1.0" encoding="UTF-8"?>
<!--日志级别以及优先级排序: OFF > FATAL > ERROR > WARN > INFO > DEBUG > TRACE > ALL -->
<!--Configuration后面的status，这个用于设置log4j2自身内部的信息输出，可以不设置，
当设置成trace时，你会看到log4j2内部各种详细输出-->
<!--monitorInterval：Log4j能够自动检测修改配置 文件和重新配置本身，设置间隔秒数-->
<configuration status="WARN" monitorInterval="30">
    <!--先定义所有的appender-->
    <!--先定义所有的appender-->
    <!-- 日志级别
            trace：追踪，就是程序推进一下，可以写个trace输出
            debug：调试，一般作为最低级别，trace基本不用。
            info：输出重要的信息，使用较多
            warn：警告，有些信息不是错误信息，但也要给一些提示。
            error：错误信息。用的也很多。
            fatal：致命错误。级别较高.
     -->
    <appenders>
        <!--这个输出控制台的配置-->
        <console name="Console" target="SYSTEM_OUT">
            <!--输出日志的格式-->
            <!--
            自定义格式：
                %t：线程名称
                %p：日志级别
                %c：日志消息所在类名
                %m：消息内容
                %M：输出执行方法
                %d：发生时间，%d{yyyy-MM-dd HH:mm:ss,SSS}，输出类似：2018-10-18 22:10:28,921
                %x: 输出和当前线程相关联的NDC(嵌套诊断环境),尤其用到像java servlets这样的多客户多线程的应用中。
                %L：代码中的行数
                %n：换行
            -->
            <PatternLayout pattern="[%d{yyyy-MM-dd HH:mm:ss.SSSZ}] %-5level [%t] %C{1.}:%L %X %msg%n"/>
        </console>
        <!--RollingFile
        　    fileName:指定输出日志的目的文件带全路径的文件名.
　　　　　　　　PatternLayout:输出格式，不设置默认为:%m%n.
　　　　　　　　filePattern:指定新建日志文件的名称格式.
　　　　　　　　Policies:指定滚动日志的策略，就是什么时候进行新建日志文件输出日志.
　　　　　　　   TimeBasedTriggeringPolicy:Policies子节点，基于时间的滚动策略，interval属性用来指定多久滚动一次，默认是1 hour。modulate=true用来调整时间：比如现在是早上3am，interval是4，那么第一次滚动是在4am，接着是8am，12am...而不是7am.
　　　　　　　　SizeBasedTriggeringPolicy:Policies子节点，基于指定文件大小的滚动策略，size属性用来定义每个日志文件的大小.
　　　　　　　　DefaultRolloverStrategy:用来指定同一个文件夹下最多有几个日志文件时开始删除最旧的，创建新的(通过max属性),默认
              这个会打印出所有的信息，每次大小超过size，则这size大小的日志会自动存入按年份-月份建立的文件夹下面并进行压缩，作为存档
           -->
        <!-- 这个会打印出所有的info及以下级别的信息，每次大小超过size，则这size大小的日志会自动存入按年份-月份建立的文件夹下面并进行压缩，作为存档-->
        <RollingFile name="RollingFileInfo" fileName="./logs/app.log"
                     filePattern="./logs/archive/app-%d{yyyy-MM-dd}-%i.log">
            <!--控制台只输出level及以上级别的信息（onMatch），其他的直接拒绝（onMismatch）-->
            <ThresholdFilter level="INFO" onMatch="ACCEPT" onMismatch="DENY"/>
            <PatternLayout pattern="[%d{yyyy-MM-dd HH:mm:ss.SSSZ}] %-5level [%t] %C{1.}:%L %X %msg%n"/>
            <Policies>
                <TimeBasedTriggeringPolicy/>
                <SizeBasedTriggeringPolicy size="100 MB"/>
            </Policies>
        </RollingFile>

        <RollingFile name="RollingFileError" fileName="./logs/error.log"
                     filePattern="./logs/archive/error-%d{yyyy-MM-dd}-%i.log" immediateFlush="false">
            <ThresholdFilter level="WARN" onMatch="ACCEPT" onMismatch="DENY"/>
            <PatternLayout pattern="[%d{yyyy-MM-dd HH:mm:ss.SSSZ}] %-5level [%t] %C{1.}:%L %X %msg%n"/>
            <Policies>
                <TimeBasedTriggeringPolicy/>
                <SizeBasedTriggeringPolicy size="100 MB"/>
            </Policies>
        </RollingFile>

        <RollingFile name="DubboProviderAsync" fileName="./logs/dubbo_provider.log"
                     filePattern="./logs/archive/dubbo_provider-%d{yyyy-MM-dd}-%i.log" immediateFlush="false">
            <ThresholdFilter level="INFO" onMatch="ACCEPT" onMismatch="DENY"/>
            <PatternLayout pattern="[%d{yyyy-MM-dd HH:mm:ss.SSSZ}] %-5level [%t] %C{1.}:%L %X %msg%n"/>
            <Policies>
                <TimeBasedTriggeringPolicy/>
                <SizeBasedTriggeringPolicy size="100 MB"/>
            </Policies>
        </RollingFile>

        <RollingFile name="HttpAsync" fileName="./logs/http.log"
                     filePattern="./logs/archive/http-%d{yyyy-MM-dd}-%i.log" immediateFlush="false">
            <ThresholdFilter level="INFO" onMatch="ACCEPT" onMismatch="DENY"/>
            <PatternLayout pattern="[%d{yyyy-MM-dd HH:mm:ss.SSSZ}] %-5level [%t] %C{1.}:%L %X %msg%n"/>
            <Policies>
                <TimeBasedTriggeringPolicy/>
                <SizeBasedTriggeringPolicy size="100 MB"/>
            </Policies>
        </RollingFile>
    </appenders>

    <!--然后定义logger，只有定义了logger并引入的appender，appender才会生效-->

    <!--定义logger
         只有定义了logger并引入的appender，appender才会生效
              常见的有两种:Root和Logger.
 　　　　　　　Root节点用来指定项目的根日志，如果没有单独指定Logger，那么就会默认使用该Root日志输出
 　　　　　　　　　level:日志输出级别，共有8个级别，按照从低到高为：All < Trace < Debug < Info < Warn < Error < Fatal < OFF.
 　　　　　　　　　AppenderRef：Root的子节点，用来指定该日志输出到哪个Appender.
 　　　　　　　Logger节点用来单独指定日志的形式，比如要为指定包下的class指定不同的日志级别等。
 　　　　　　　　　level:日志输出级别，共有8个级别，按照从低到高为：All < Trace < Debug < Info < Warn < Error < Fatal < OFF.
 　　　　　　　　　name:用来指定该Logger所适用的类或者类所在的包全路径,继承自Root节点.
 　　　　　　　　　AppenderRef：Logger的子节点，用来指定该日志输出到哪个Appender,
                                 如果没有指定，就会默认继承自Root.如果指定了，
                                 那么会在指定的这个Appender和Root的Appender中都会输出，
                                 此时我们可以设置Logger的additivity="false"只在自定义的Appender中进行输出。
     -->
    <loggers>
        <!--过滤掉spring和mybatis的一些无用的DEBUG信息-->
        <logger name="org.springframework" level="INFO"/>
        <logger name="org.mybatis" level="INFO"/>
        <logger name="com.alibaba" level="WARN"/>
        <logger name="org.apache" level="WARN"/>
        <logger name="kafka" level="WARN"/>
        <!-- 异步日志在程序的classpath需要加载disruptor-3.0.0.jar或者更高的版本。
        异步日志分为两种：
        a.全异步模式
        这种异步日志方式，不需要修改修改原理的配置文件，Logger仍然使用<root> and <logger>
        只需要在主程序代码开头，加一句系统属性的代码：
        System.setProperty("Log4jContextSelector", "org.apache.logging.log4j.core.async.AsyncLoggerContextSelector");
        b.异步和非异步混合输出模式
         在配置文件中Logger使用<asyncRoot> or <asyncLogger>
             -->
        <Asyncroot level="INFO" includeLocation="true">
            <springProfile name="dev1">
                <appender-ref ref="Console"/>
            </springProfile>
            <appender-ref ref="RollingFileError"/>
            <appender-ref ref="RollingFileInfo"/>
        </Asyncroot>
    </loggers>
</configuration>